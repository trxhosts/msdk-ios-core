//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import RswiftResources
import UIKit

private class BundleFinder {}
let R = _R(bundle: Bundle(for: BundleFinder.self))

struct _R {
  let bundle: Foundation.Bundle

  let reuseIdentifier = reuseIdentifier()

  var color: color { .init(bundle: bundle) }
  var storyboard: storyboard { .init(bundle: bundle) }

  func color(bundle: Foundation.Bundle) -> color {
    .init(bundle: bundle)
  }
  func storyboard(bundle: Foundation.Bundle) -> storyboard {
    .init(bundle: bundle)
  }
  func validate() throws {
    try self.storyboard.validate()
  }

  struct project {
    let developmentRegion = "en"
  }

  /// This `_R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    let bundle: Foundation.Bundle

    /// Color `AccentColor`.
    var accentColor: RswiftResources.ColorResource { .init(name: "AccentColor", path: [], bundle: bundle) }
  }

  /// This `_R.reuseIdentifier` struct is generated, and contains static references to 2 reuse identifiers.
  struct reuseIdentifier {

    /// Reuse identifier `clarificationField`.
    let clarificationField: RswiftResources.ReuseIdentifier<ClarificationFieldTableViewCell> = .init(identifier: "clarificationField")

    /// Reuse identifier `customerField`.
    let customerField: RswiftResources.ReuseIdentifier<CustomerFieldTableViewCell> = .init(identifier: "customerField")
  }

  /// This `_R.storyboard` struct is generated, and contains static references to 11 storyboards.
  struct storyboard {
    let bundle: Foundation.Bundle
    var applePay: applePay { .init(bundle: bundle) }
    var aps: aps { .init(bundle: bundle) }
    var cardSale: cardSale { .init(bundle: bundle) }
    var clarificationFields: clarificationFields { .init(bundle: bundle) }
    var customerFields: customerFields { .init(bundle: bundle) }
    var final: final { .init(bundle: bundle) }
    var launchScreen: launchScreen { .init(bundle: bundle) }
    var main: main { .init(bundle: bundle) }
    var removeSavedCardViewController: removeSavedCardViewController { .init(bundle: bundle) }
    var restorePayment: restorePayment { .init(bundle: bundle) }
    var threeDSecure: threeDSecure { .init(bundle: bundle) }

    func applePay(bundle: Foundation.Bundle) -> applePay {
      .init(bundle: bundle)
    }
    func aps(bundle: Foundation.Bundle) -> aps {
      .init(bundle: bundle)
    }
    func cardSale(bundle: Foundation.Bundle) -> cardSale {
      .init(bundle: bundle)
    }
    func clarificationFields(bundle: Foundation.Bundle) -> clarificationFields {
      .init(bundle: bundle)
    }
    func customerFields(bundle: Foundation.Bundle) -> customerFields {
      .init(bundle: bundle)
    }
    func final(bundle: Foundation.Bundle) -> final {
      .init(bundle: bundle)
    }
    func launchScreen(bundle: Foundation.Bundle) -> launchScreen {
      .init(bundle: bundle)
    }
    func main(bundle: Foundation.Bundle) -> main {
      .init(bundle: bundle)
    }
    func removeSavedCardViewController(bundle: Foundation.Bundle) -> removeSavedCardViewController {
      .init(bundle: bundle)
    }
    func restorePayment(bundle: Foundation.Bundle) -> restorePayment {
      .init(bundle: bundle)
    }
    func threeDSecure(bundle: Foundation.Bundle) -> threeDSecure {
      .init(bundle: bundle)
    }
    func validate() throws {
      try self.applePay.validate()
      try self.aps.validate()
      try self.cardSale.validate()
      try self.clarificationFields.validate()
      try self.customerFields.validate()
      try self.final.validate()
      try self.launchScreen.validate()
      try self.main.validate()
      try self.removeSavedCardViewController.validate()
      try self.restorePayment.validate()
      try self.threeDSecure.validate()
    }


    /// Storyboard `ApplePay`.
    struct applePay: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "ApplePay"

      var applePaySaleViewController: RswiftResources.StoryboardViewControllerIdentifier<ApplePaySaleViewController> { .init(identifier: "ApplePaySaleViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if applePaySaleViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'applePaySaleViewController' could not be loaded from storyboard 'ApplePay' as 'ApplePaySaleViewController'.") }
      }
    }

    /// Storyboard `Aps`.
    struct aps: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "Aps"

      var apsViewController: RswiftResources.StoryboardViewControllerIdentifier<ApsViewController> { .init(identifier: "ApsViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if apsViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'apsViewController' could not be loaded from storyboard 'Aps' as 'ApsViewController'.") }
      }
    }

    /// Storyboard `CardSale`.
    struct cardSale: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "CardSale"

      var cardSaleViewController: RswiftResources.StoryboardViewControllerIdentifier<CardSaleViewController> { .init(identifier: "CardSaleViewController", storyboard: name, bundle: bundle) }
      var savedCardSaleViewController: RswiftResources.StoryboardViewControllerIdentifier<SavedCardSaleViewController> { .init(identifier: "SavedCardSaleViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if cardSaleViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'cardSaleViewController' could not be loaded from storyboard 'CardSale' as 'CardSaleViewController'.") }
        if savedCardSaleViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'savedCardSaleViewController' could not be loaded from storyboard 'CardSale' as 'SavedCardSaleViewController'.") }
      }
    }

    /// Storyboard `ClarificationFields`.
    struct clarificationFields: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "ClarificationFields"

      var clarificationFieldsTableViewController: RswiftResources.StoryboardViewControllerIdentifier<ClarificationFieldsTableViewController> { .init(identifier: "ClarificationFieldsTableViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if clarificationFieldsTableViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'clarificationFieldsTableViewController' could not be loaded from storyboard 'ClarificationFields' as 'ClarificationFieldsTableViewController'.") }
      }
    }

    /// Storyboard `CustomerFields`.
    struct customerFields: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "CustomerFields"

      var customerFieldsTableViewController: RswiftResources.StoryboardViewControllerIdentifier<CustomerFieldsTableViewController> { .init(identifier: "CustomerFieldsTableViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if customerFieldsTableViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'customerFieldsTableViewController' could not be loaded from storyboard 'CustomerFields' as 'CustomerFieldsTableViewController'.") }
      }
    }

    /// Storyboard `Final`.
    struct final: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "Final"

      var finalViewController: RswiftResources.StoryboardViewControllerIdentifier<FinalViewController> { .init(identifier: "FinalViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if finalViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'finalViewController' could not be loaded from storyboard 'Final' as 'FinalViewController'.") }
      }
    }

    /// Storyboard `LaunchScreen`.
    struct launchScreen: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UIViewController

      let bundle: Foundation.Bundle

      let name = "LaunchScreen"
      func validate() throws {

      }
    }

    /// Storyboard `Main`.
    struct main: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "Main"

      var mainViewController: RswiftResources.StoryboardViewControllerIdentifier<MainViewController> { .init(identifier: "MainViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if mainViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'mainViewController' could not be loaded from storyboard 'Main' as 'MainViewController'.") }
      }
    }

    /// Storyboard `RemoveSavedCardViewController`.
    struct removeSavedCardViewController: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "RemoveSavedCardViewController"

      var removeSavedCardViewController: RswiftResources.StoryboardViewControllerIdentifier<RemoveSavedCardViewController> { .init(identifier: "RemoveSavedCardViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if removeSavedCardViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'removeSavedCardViewController' could not be loaded from storyboard 'RemoveSavedCardViewController' as 'RemoveSavedCardViewController'.") }
      }
    }

    /// Storyboard `RestorePayment`.
    struct restorePayment: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "RestorePayment"

      var restorePaymentViewController: RswiftResources.StoryboardViewControllerIdentifier<RestorePaymentViewController> { .init(identifier: "RestorePaymentViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if restorePaymentViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'restorePaymentViewController' could not be loaded from storyboard 'RestorePayment' as 'RestorePaymentViewController'.") }
      }
    }

    /// Storyboard `ThreeDSecure`.
    struct threeDSecure: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "ThreeDSecure"

      var threeDSecureViewController: RswiftResources.StoryboardViewControllerIdentifier<ThreeDSecureViewController> { .init(identifier: "ThreeDSecureViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if threeDSecureViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'threeDSecureViewController' could not be loaded from storyboard 'ThreeDSecure' as 'ThreeDSecureViewController'.") }
      }
    }
  }
}